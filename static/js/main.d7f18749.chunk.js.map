{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","api.js","App.js","serviceWorker.js","index.js"],"names":["Event","this","props","event","location","Component","EventList","className","events","map","key","id","CitySearch","state","query","suggestions","showSuggestions","handleInputChanged","value","target","locations","filter","toUpperCase","indexOf","setState","handleItemClicked","suggestion","updateEvents","type","onChange","onFocus","style","display","onClick","extractLocations","Set","checkToken","accessToken","a","fetch","then","res","json","catch","error","result","getEvents","NProgress","start","getAccessToken","token","removeQuery","url","axios","get","data","localStorage","setItem","JSON","stringify","done","getItem","tokenCheck","removeItem","searchParams","URLSearchParams","window","search","code","results","authUrl","href","getToken","history","pushState","pathname","newurl","protocol","host","encodeCode","encodeURIComponent","access_token","App","locationEvents","mounted","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.d7f18749.chunk.js","sourcesContent":["// src/Event.js\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass Event extends Component {\r\n  render() {\r\n    return <div>{this.props.event.location} !!!!!!!</div>;\r\n  }\r\n}\r\nexport default Event;\r\n","// src/EventList.js\r\n\r\nimport React, { Component } from 'react';\r\nimport Event from './Event'; // in src/EventList.js\r\n\r\nclass EventList extends Component {\r\n  render() {\r\n    return (\r\n      <ul className=\"EventList\">\r\n        {this.props.events.map(event =>\r\n          <li key={event.id}>\r\n            <Event event={event} />\r\n          </li>\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default EventList;\r\n","import React, { Component } from 'react';\r\n\r\nclass CitySearch extends Component {\r\n\r\n  state = {\r\n    query: '',\r\n    suggestions: [],\r\n    showSuggestions: false\r\n  }\r\n\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    const suggestions = this.props.locations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    });\r\n    this.setState({\r\n      query: value,\r\n      suggestions,\r\n    });\r\n  };\r\n\r\n  handleItemClicked = (suggestion) => {\r\n    this.setState({\r\n      query: suggestion,\r\n      showSuggestions: false\r\n    });\r\n\r\n    this.props.updateEvents(suggestion);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CitySearch\" >\r\n        <input\r\n          type=\"text\"\r\n          className=\"city\"\r\n          value={this.state.query}\r\n          onChange={this.handleInputChanged}\r\n          onFocus={() => { this.setState({ showSuggestions: true }) }}\r\n        />\r\n        <ul className=\"suggestions\"\r\n          style={this.state.showSuggestions ? {} : { display: 'none' }}\r\n        >\r\n          {this.state.suggestions.map((suggestion) => (\r\n            <li\r\n              key={suggestion}\r\n              onClick={() => this.handleItemClicked(suggestion)}\r\n            >{suggestion}</li>\r\n          ))}\r\n          <li onClick={() => this.handleItemClicked(\"all\")}>\r\n            <b>See all cities</b>\r\n          </li>\r\n\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;\r\n","// import { mockData } from './mock-data';\r\nimport axios from 'axios';\r\n\r\n\r\nimport NProgress from 'nprogress';\r\n\r\n/**\r\n *\r\n * @param {*} events:\r\n * The following function should be in the “api.js” file.\r\n * This function takes an events array, then uses map to create a new array with only locations.\r\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n * The Set will remove all duplicates from the array.\r\n */\r\nexport const extractLocations = (events) => {\r\n  var extractLocations = events.map((event) => event.location);\r\n  var locations = [...new Set(extractLocations)];\r\n  return locations;\r\n};\r\n\r\nexport const checkToken = async (accessToken) => {\r\n  const result = await fetch(\r\n    `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\r\n  )\r\n    .then((res) => res.json())\r\n    .catch((error) => error.json());\r\n\r\n  return result;\r\n};\r\n\r\n\r\nexport const getEvents = async () => {\r\n  NProgress.start();\r\n\r\n  // if (window.location.href.startsWith(\"http://localhost\")) {\r\n  //   NProgress.done();\r\n  //   return mockData;\r\n  // }\r\n\r\n\r\n  const token = await getAccessToken();\r\n\r\n  if (token) {\r\n    removeQuery();\r\n    const url = `http://localhost:4000/dev/api/get-events/${token}`;\r\n    const result = await axios.get(url);\r\n    if (result.data) {\r\n      var locations = extractLocations(result.data.events);\r\n      localStorage.setItem(\"lastEvents\", JSON.stringify(result.data));\r\n      localStorage.setItem(\"locations\", JSON.stringify(locations));\r\n    }\r\n    NProgress.done();\r\n    return result.data.events;\r\n  }\r\n};\r\n\r\n\r\n\r\nexport const getAccessToken = async () => {\r\n  const accessToken = localStorage.getItem('access_token');\r\n  const tokenCheck = accessToken && (await checkToken(accessToken));\r\n\r\n  if (!accessToken || tokenCheck.error) {\r\n    await localStorage.removeItem(\"access_token\");\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    const code = await searchParams.get(\"code\");\r\n    if (!code) {\r\n      const results = await axios.get(\r\n        \"http://localhost:4000/dev/api/get-auth-url\"\r\n      );\r\n      const { authUrl } = results.data;\r\n      return (window.location.href = authUrl);\r\n    }\r\n    return code && getToken(code);\r\n  }\r\n  return accessToken;\r\n}\r\n\r\nconst removeQuery = () => {\r\n  if (window.history.pushState && window.location.pathname) {\r\n    var newurl =\r\n      window.location.protocol +\r\n      \"//\" +\r\n      window.location.host +\r\n      window.location.pathname;\r\n    window.history.pushState(\"\", \"\", newurl);\r\n  } else {\r\n    newurl = window.location.protocol + \"//\" + window.location.host;\r\n    window.history.pushState(\"\", \"\", newurl);\r\n  }\r\n};\r\n\r\nconst getToken = async (code) => {\r\n  const encodeCode = encodeURIComponent(code);\r\n  const { access_token } = await fetch(\r\n    `http://localhost:4000/dev/api/token/${encodeCode}`\r\n  )\r\n    .then((res) => {\r\n      return res.json();\r\n    })\r\n    .catch((error) => error);\r\n\r\n  access_token && localStorage.setItem(\"access_token\", access_token);\r\n\r\n  return access_token;\r\n};\r\n","// src/App.js\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport { extractLocations, getEvents } from './api';\n\nclass App extends Component {\n  state = {\n    events: [],\n    locations: []\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    getEvents().then((events) => {\n      if (this.mounted) {\n        this.setState({ events, locations: extractLocations(events) });\n      }\n    });\n  }\n\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n\n  updateEvents = (location) => {\n    getEvents().then((events) => {\n      const locationEvents = (location === 'all') ?\n        events :\n        events.filter((event) => event.location === location);\n      this.setState({\n        events: locationEvents\n      });\n    });\n  }\n\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <CitySearch locations={this.state.locations} updateEvents={this.updateEvents} />\n        <EventList events={this.state.events} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}